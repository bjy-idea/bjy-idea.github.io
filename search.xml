<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Python2和Python3的编码差异</title>
    <url>/2019/11/01/Python2%E5%92%8CPython3%E7%9A%84%E7%BC%96%E7%A0%81%E5%B7%AE%E5%BC%82/</url>
    <content><![CDATA[<h1 id="Python2和Python3的编码差异"><a href="#Python2和Python3的编码差异" class="headerlink" title="Python2和Python3的编码差异"></a>Python2和Python3的编码差异</h1><h2 id="1-了解字符集和字符编码知识"><a href="#1-了解字符集和字符编码知识" class="headerlink" title="1. 了解字符集和字符编码知识"></a>1. 了解字符集和字符编码知识</h2><p>参考链接<a href="https://www.cnblogs.com/skynet/archive/2011/05/03/2035105.html#_3.4.UTF-8" target="_blank" rel="noopener">https://www.cnblogs.com/skynet/archive/2011/05/03/2035105.html#_3.4.UTF-8</a></p>
<p><em>以下为自己的一些理解</em></p>
<h3 id="基础概念"><a href="#基础概念" class="headerlink" title="基础概念"></a>基础概念</h3><ol>
<li>编码 将我们看到的字符已某种规则存储为二进制数据</li>
<li>解码  将存储于计算机的二进制数据解析显示出来 解码错误即产生乱码</li>
<li>字符集 抽象字符的集合 可以包括如文字，标点符号等等</li>
<li>字符编码 将字符集合和数字集合建立关系的规则</li>
<li>常见字符集名称 ASCII 字符集、GB2312 字符集、BIG5 字符集、GB18030 字符集、Unicode 字符集等。</li>
</ol>
<h2 id="2-Python2和Python3的编码差异"><a href="#2-Python2和Python3的编码差异" class="headerlink" title="2. Python2和Python3的编码差异"></a>2. Python2和Python3的编码差异</h2><p>明确：str是文本，bytes是字节</p>
<p>参考链接</p>
<ol>
<li><a href="https://blog.csdn.net/zengchen73/article/details/75302301" target="_blank" rel="noopener">https://blog.csdn.net/zengchen73/article/details/75302301</a></li>
<li><a href="https://www.cnblogs.com/20120810bubu/archive/2013/04/22/3036132.html" target="_blank" rel="noopener">https://www.cnblogs.com/20120810bubu/archive/2013/04/22/3036132.html</a></li>
</ol>
<p><em>以下为自己的一些理解</em></p>
<h3 id="Python2"><a href="#Python2" class="headerlink" title="Python2"></a>Python2</h3><p>Python2 默认编码为ASCII，Unicode类型是单独的</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Ptyhon2 中没有专门的bytes类型</span><br><span class="line">&gt;&gt;&gt; type(b&apos;a&apos;)</span><br><span class="line">&lt;type &apos;str&apos;&gt;</span><br><span class="line"></span><br><span class="line">&gt;&gt;&gt; b&apos;a&apos;.encode(&apos;gb2312&apos;)</span><br><span class="line">&apos;a&apos;  （字节encode之前会先进行decode,这在Python3中已经被取消）</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">a=&apos;nihao中国&apos;</span><br><span class="line">a  </span><br><span class="line">&apos;nihao\xe4\xb8\xad\xe5\x9b\xbd&apos;</span><br><span class="line">这里默认的编码为ascii，中文内容无法显示，所以输出实际字节内容</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">str(u&apos;hello&apos;) 将unicode字符串转换为ascii字符串</span><br></pre></td></tr></table></figure>

<h3 id="Python3"><a href="#Python3" class="headerlink" title="Python3"></a>Python3</h3><p>python2中是不区分bytes和str类型的，在python3中bytes和str中是区分的，str的所有操作bytes都支持</p>
<p>在python2中 u’a’ 是 Unicode 对象<br>在python3中 u’a’就是Str对象</p>
<h2 id="补充"><a href="#补充" class="headerlink" title="补充"></a>补充</h2><p>str 编码得到 bytes<br>bytes 解码得到 str</p>
]]></content>
  </entry>
  <entry>
    <title>Terminal Proxy</title>
    <url>/2019/10/29/Terminal-Proxy/</url>
    <content><![CDATA[<h1 id="Mac-OSX-终端设置代理"><a href="#Mac-OSX-终端设置代理" class="headerlink" title="Mac OSX 终端设置代理"></a>Mac OSX 终端设置代理</h1><p>使用mac下的brew安装软件时实在龟速，搜索发现普遍的解决方案为为终端配置代理，找到一篇讲得很好的博客来操作</p>
<p><em>参考文章<a href="https://github.com/mrdulin/blog/issues/18" target="_blank" rel="noopener">https://github.com/mrdulin/blog/issues/18</a>，以下为摘录</em></p>
<p>##关键步骤(以zsh为例)</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">~ vim ~/.zshrc</span><br><span class="line"></span><br><span class="line"># proxy list</span><br><span class="line">alias proxy=&apos;export all_proxy=socks5://127.0.0.1:1080&apos;</span><br><span class="line">alias unproxy=&apos;unset all_proxy&apos;</span><br><span class="line"></span><br><span class="line">~ source ~/.zshrc</span><br></pre></td></tr></table></figure>

]]></content>
  </entry>
  <entry>
    <title>Python Import</title>
    <url>/2019/10/25/Python-Import/</url>
    <content><![CDATA[<h1 id="Python-Import-的一些问题"><a href="#Python-Import-的一些问题" class="headerlink" title="Python Import 的一些问题"></a>Python Import 的一些问题</h1><p>一直没认真研究过Python的import机制，最近遇到个问题</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ValueError: attempted relative import beyond top-level package...</span><br></pre></td></tr></table></figure>

<p>发现是相对路径import引起的</p>
<p>搜索了几篇不错的博客，在此记录一下（最好还是再看下官方文档）</p>
<ol>
<li>import 的机制 <a href="https://blog.csdn.net/weixin_38256474/article/details/81228492" target="_blank" rel="noopener">https://blog.csdn.net/weixin_38256474/article/details/81228492</a></li>
<li>import 绝对路径和相对路径用法的区别 <a href="https://zhuanlan.zhihu.com/p/63143493" target="_blank" rel="noopener">https://zhuanlan.zhihu.com/p/63143493</a></li>
</ol>
]]></content>
  </entry>
  <entry>
    <title>Hello World</title>
    <url>/2019/10/15/Hello-World-0/</url>
    <content><![CDATA[<p>Hello World！</p>
<p>Todo list 里一直有条搭建博客的记录，今天终于利用github完成了</p>
<p>用首篇文章纪念下，督促自己反思生活和工作～😄</p>
]]></content>
  </entry>
</search>
